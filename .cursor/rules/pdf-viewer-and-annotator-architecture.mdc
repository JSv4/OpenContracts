---
description: When working on pdf annotations or pdf rendering, consult this high level overview
globs: *DocumentKnowledgeBase*,**/knowledge_base/**/*,**/annotator/**/*
alwaysApply: false
---
# Understanding the PDF Annotation System Architecture

# Understanding the PDF Annotation System Architecture

## Admin Tasks if you Edit PDF-related frontend code
1. When working on document knowledge base and pdf-related frontend functionality, ensure you update our cursor rule here [pdf-viewer-and-annotator-architecture.mdc](mdc:.cursor/rules/pdf-viewer-and-annotator-architecture.mdc) such that it captures any material changes to our existing setup.

## Context: Document Knowledge Base

The `DocumentKnowledgeBase` component serves as the main container for viewing and interacting with documents, particularly PDFs. It provides a comprehensive interface that combines document viewing with annotation capabilities, search functionality, and knowledge extraction features.

The system uses a sophisticated virtualized rendering approach for PDFs, where only visible pages (plus a small overscan buffer) are rendered to dramatically improve performance with large documents. This is coupled with an advanced annotation management system that allows users to view, filter, and interact with annotations overlaid on the document.

## Intent: High-Performance Document Rendering with Rich Annotation Management

The architecture aims to:

1. Efficiently render large PDF documents using virtualization (only visible pages are rendered)
2. Provide a flexible annotation system that can display/hide annotations based on user preferences
3. Support various annotation types (spans, tokens, structural elements)
4. Enable real-time filtering and selection of annotations
5. Maintain consistent state across the entire application using Jotai atoms
6. Ensure smooth scrolling and navigation even with hundreds of pages

## Component Interactions

### State Management with Jotai

The system uses Jotai atoms to manage global state:

```
AnnotationAtoms.tsx
├── pdfAnnotationsAtom - Core annotation state
├── structuralAnnotationsAtom - Structural annotations
├── allAnnotationsAtom - Computed, de-duplicated list
└── perPageAnnotationsAtom - Page-indexed annotation map
```

This approach provides:
- Centralized state management
- Computed derivations that automatically update
- Efficient re-rendering when only relevant state changes

### PDF Rendering Pipeline

1. **DocumentKnowledgeBase** initializes the document view and loads annotation data via GraphQL
   - Loads PDF document using pdfjs-dist
   - Fetches PAWLS token data for precise text selection
   - Initializes Jotai atoms with annotation data

2. **PDF** component manages the virtualized rendering of pages:
   - Calculates page heights at current zoom level (cached per zoom)
   - Uses binary search to determine visible page range
   - Adds overscan buffer (2 pages above/below) for smooth scrolling
   - Ensures selected annotation/search result pages are always rendered
   - Absolutely positions all pages based on cumulative heights

3. **PDFPage** renders individual pages with their annotations:
   - Only mounts when page is in visible range
   - Creates and manages its own PDF canvas
   - Overlays annotation components on top of the canvas
   - Handles user interactions for creating/selecting annotations
   - Implements two-phase scroll-to-annotation system

### Virtualization Implementation Details

The PDF component implements sophisticated virtualization:

```typescript
// Page height calculation (cached per zoom level)
useEffect(() => {
  const heights = await calculatePageHeights(pdfDoc, zoomLevel);
  setPageHeights(heights);
}, [pdfDoc, zoomLevel]);

// Visible range calculation using binary search
const calcRange = useCallback(() => {
  const scroll = getScrollPosition();
  const viewHeight = getViewportHeight();
  
  // Binary search for first/last visible pages
  const firstVisible = binarySearchFirstVisible(cumulative, scroll);
  const lastVisible = binarySearchLastVisible(cumulative, scroll + viewHeight);
  
  // Add overscan and ensure selected items are visible
  let start = Math.max(0, firstVisible - OVERSCAN);
  let end = Math.min(pageCount - 1, lastVisible + OVERSCAN);
  
  // Force selected annotation's page to be visible
  if (selectedPageIdx !== undefined) {
    start = Math.min(start, selectedPageIdx);
    end = Math.max(end, selectedPageIdx);
  }
  
  setRange([start, end]);
}, [/* dependencies */]);
```

### Annotation Visibility System

The annotation visibility system works through several interconnected components:

1. **ViewSettingsPopup** provides UI controls for filtering annotations:
   - Toggle for showing only selected annotations
   - Toggle for showing structural annotations
   - Toggle for showing bounding boxes
   - Label filter selection

2. **useAnnotationDisplay** hook manages display preferences:
   - Stores user preferences about which annotations to show
   - Provides setters to update these preferences

3. **useVisibleAnnotations** hook applies filtering logic:
   - Takes the complete annotation list from `useAllAnnotations`
   - Applies filters based on settings from `useAnnotationDisplay`
   - Returns only the annotations that should be visible
   - Handles special cases like forcing visibility of selected annotations

4. **PDFPage** and other components consume the filtered list:
   - Render only the annotations returned by `useVisibleAnnotations`
   - Apply additional page-specific filtering

### Scroll-to-Annotation System

The system uses a two-phase approach for scrolling to annotations, triggered by:
- URL parameters (`?ann=id1,id2`)
- Direct props (`initialAnnotationIds`)
- Programmatic selection

1. **Phase 1 (PDF.tsx)**: Scroll to make the page visible
   - Calculate which page contains the annotation
   - Expand virtualization range to include the page
   - Scroll container so page is in viewport
   - Set pendingScrollAnnotationIdAtom

2. **Phase 2 (PDFPage.tsx)**: Center the specific annotation
   - Check if page owns the pending annotation
   - Find the annotation element once rendered
   - Scroll it into view with centering
   - Retry with requestAnimationFrame if element not yet rendered

See [scroll-to-annotation-flow.md](docs/architecture/components/annotator/scroll-to-annotation-flow.md) for complete details.

### Data Flow for Annotation Updates

When annotations are updated (added, modified, or filtered):

1. Changes are made to `pdfAnnotationsAtom` via `usePdfAnnotations().setPdfAnnotations`
2. `allAnnotationsAtom` automatically recomputes to include the changes
3. `useVisibleAnnotations` applies current filters to the updated list
4. Components consuming `useVisibleAnnotations` re-render with the new filtered list

## Key Technical Aspects

1. **Virtualization**: Only visible PDF pages (+overscan) are rendered, providing dramatic performance improvements for large documents. Binary search algorithms ensure O(log n) complexity for finding visible pages.

2. **Height Caching**: Page heights are calculated once per zoom level and cached, preventing expensive recalculations during scrolling.

3. **Smart Range Expansion**: The visible range automatically expands to include selected annotations, search results, or chat source highlights, ensuring important content is always rendered.

4. **Computed Derivations**: `allAnnotationsAtom` and `perPageAnnotationsAtom` are derived states that automatically update when their dependencies change, eliminating manual synchronization.

5. **Centralized Filtering**: The `useVisibleAnnotations` hook centralizes filtering logic so it's consistent across all components.

6. **Forced Visibility**: Some annotations (selected ones, those in relationships) are forced to be visible regardless of filter settings.

7. **Efficient Rendering**: Components only re-render when their specific dependencies change, not on every state update. PDFPage components manage their own lifecycle independently.

8. **Absolute Positioning**: All pages are absolutely positioned based on cumulative heights, with a spacer div maintaining correct total scroll height.

This architecture creates a flexible, highly performant system for displaying and interacting with annotations on PDF documents, with centralized state management and consistent filtering logic across the application. The virtualization approach enables smooth handling of documents with hundreds or thousands of pages.
