name: Backend CI

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL: True
  # Kind cluster settings
  KIND_CLUSTER_NAME: kind-opencontracts-ci
  REGISTRY_NAME: opencontracts-registry
  REGISTRY_PORT: 5005

defaults:
 run:
  working-directory: ./

on:
  pull_request:
    branches: [ "master", "main" ]
    paths-ignore: [ "docs/**" ]

  push:
    branches: [ "master", "main" ]
    paths-ignore: [ "docs/**" ]

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4.2.2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            requirements/base.txt
            requirements/local.txt

      - name: Install dependencies
        run: pip install -r requirements/local.txt

      - name: Run pre-commit
        run: pre-commit run --all-files

  pytest:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Remove additional unnecessary tools
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/local/julia*
          sudo rm -rf /usr/share/miniconda
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /opt/hostedtoolcache
          df -h

      - name: Checkout Code Repository
        uses: actions/checkout@v4.2.2

      - name: Store Codecov Env Flags
        run: |
          # use bash variable expression to get the substring
          ci_env=`bash <(curl -s https://codecov.io/env)`
          echo "$ci_env"

      - name: Delete frontend files
        run: |
          rm -rf docs/
          rm -rf frontend/
          rm -rf site/

      - name: Remove CodeQL bundle
        run: sudo rm -rf /opt/hostedtoolcache/CodeQL

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            requirements/base.txt
            requirements/local.txt

      - name: Install Python dependencies
        run: |
          pip install -r requirements/local.txt
          pip install coverage pytest pytest-cov codecov

      - name: Install kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Install ctlptl
        run: |
          curl -fsSL https://github.com/tilt-dev/ctlptl/releases/download/v0.8.29/ctlptl.0.8.29.linux.x86_64.tar.gz | sudo tar -xzv -C /usr/local/bin ctlptl

      - name: Install Tilt
        run: |
          curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash

      - name: Setup Kind cluster with registry
        run: |
          # Use the tilt-setup.py script to create cluster and registry
          python3 tilt-setup.py setup

      - name: Wait for cluster to be ready
        run: |
          kubectl wait --for=condition=Ready nodes --all --timeout=120s
          kubectl get nodes


      - name: Start Tilt
        run: |
          # Start Tilt in CI mode with test configuration
          OPENCONTRACTS_ENV=test tilt ci --port=0 -f Tiltfile.test

      - name: Wait for services to be ready
        run: |
          # Wait for all deployments to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/postgres
          kubectl wait --for=condition=available --timeout=300s deployment/redis
          kubectl wait --for=condition=available --timeout=300s deployment/django
          kubectl wait --for=condition=available --timeout=300s deployment/celeryworker
          kubectl wait --for=condition=available --timeout=300s deployment/celerybeat
          kubectl wait --for=condition=available --timeout=300s deployment/nlm-ingestor
          kubectl wait --for=condition=available --timeout=300s deployment/docling-parser
          kubectl wait --for=condition=available --timeout=300s deployment/vector-embedder

      - name: Run DB Migrations
        run: |
          kubectl exec deployment/django -- python manage.py migrate

      - name: Collect Static Files
        run: |
          kubectl exec deployment/django -- python manage.py collectstatic --noinput

      - name: Check Pod Health
        run: |
          echo "=== Pod status ==="
          kubectl get pods
          echo "=== Pod descriptions ==="
          kubectl describe pods
          echo "=== Recent events ==="
          kubectl get events --sort-by=.metadata.creationTimestamp

      - name: Capture Tilt Logs
        if: failure()
        run: |
          tilt logs > tilt-logs.txt
          kubectl logs -l app=django --all-containers=true > django-logs.txt
          kubectl logs -l app=postgres --all-containers=true > postgres-logs.txt

      - name: Upload Tilt Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: tilt-logs
          path: |
            tilt-logs.txt
            django-logs.txt
            postgres-logs.txt

      - name: Log Disk Space Before Pytest
        run: df -h

      - name: Build Pytest Coverage File
        timeout-minutes: 100
        run: |
          # Port forward to django service
          kubectl port-forward service/django 8000:8000 &
          sleep 5

          # Run the full test suite
          kubectl exec deployment/django -- coverage run -m pytest --cov-report=xml --cov -x -v

      - name: Upload Coverage Reports to Codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          COMMIT_SHA: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || env.GITHUB_SHA }}
        run:  |
              # Install codecov in the container first
              kubectl exec deployment/django -- pip install codecov
              # use bash variable expression to get the substring
              ci_env=`bash <(curl -s https://codecov.io/env)`
              kubectl exec deployment/django -- bash -c "$ci_env codecov -v -t ${CODECOV_TOKEN} -R . -f coverage.xml -C ${COMMIT_SHA}"

      - name: Tear down the Stack
        run:  |
          # Delete the kind cluster
          kind delete cluster --name=${{ env.KIND_CLUSTER_NAME }}
          # Stop and remove the registry
          docker stop ${{ env.REGISTRY_NAME }} || true
          docker rm ${{ env.REGISTRY_NAME }} || true
