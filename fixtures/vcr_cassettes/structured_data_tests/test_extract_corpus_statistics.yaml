interactions:
- request:
    body: "{\"messages\":[{\"role\":\"system\",\"content\":\"<BACKGROUND_CONTEXT>\\nYou
      are an expert assistant designed to analyze and answer queries about a collection
      of documents called 'Test Corpus'.\\n\\n**Available Tools:**\\nYou have access
      to comprehensive tools for analyzing documents in this corpus:\\n\\n1. **Document-Specific
      Tools** \u2013 available *per* document via the `ask_document` helper:\\n   -
      Vector search inside that document\\n   - Summary & note access\\n   - Annotation
      manipulation (subject to approval)\\n   - Token length calculations for context
      management\\n2. **Corpus-Level Coordination Tools** \u2013 orchestrate multi-document
      reasoning:\\n   - `list_documents()`\u2003\u2192 returns `[{document_id, title,
      description}]` for discovery\\n   - `ask_document(document_id, question)`\u2003\u2192
      runs a **document agent** and yields a rich object:\\n       \u2022 `answer`\u2003str
      \u2013 the assistant's final answer\\n       \u2022 `sources`\u2003list \u2013
      flattened citation objects (annotation_id, page, rawText \u2026)\\n       \u2022
      `timeline`\u2003list \u2013 detailed reasoning & tool calls from the sub-agent
      run\\n   Use these keys to compile thorough, well-cited corpus-level answers.\\n3.
      **Cross-Document Vector Search** \u2013 semantic search across the entire corpus
      for broad context\\n\\n**Important**: Always check what tools are available
      to you, as additional specialized tools may be provided dynamically beyond the
      core set. The exact tools available will depend on the documents in this corpus.\\n\\n**Guidelines:**\\n-
      Always use the provided tools to gather information before answering\\n- Do
      not rely on prior knowledge about the documents\\n- When appropriate, search
      across multiple documents for comprehensive answers\\n- Cite specific documents
      and sources when presenting information\\n- Prefer using `sources` returned
      by `ask_document` or vector search to justify claims\\n- Present your findings
      in clear, well-structured markdown format, using footnote-style citations\\n</BACKGROUND_CONTEXT>\\n\\nYou
      are a highly-intelligent data extraction system with advanced verification capabilities.\\n\\nEXTRACTION
      METHODOLOGY:\\n1. GATHER: Use available tools (similarity_search, load_document_md_summary,
      etc.) to find ALL relevant information\\n2. EXTRACT: Identify the specific data
      requested in: \\\"Calculate statistics for this document collection.\\\"\\n3.
      VERIFY: Before outputting, internally validate your extraction by:\\n   - Cross-referencing
      multiple sources if available\\n   - Checking for logical consistency (dates
      in order, numbers reasonable, etc.)\\n   - Ensuring no placeholder or generic
      values (like \\\"N/A\\\" unless actually in the document)\\n   - Confirming
      extracted text actually appears in the source material\\n   - For lists/collections:
      searching again with different queries to ensure completeness\\n\\nCRITICAL
      RULES:\\n- If data is not found after thorough search, return null/empty rather
      than guessing\\n- If multiple conflicting values exist, choose the most authoritative/recent\\n-
      For numeric values, verify they make sense in context (e.g., page count > 0)\\n-
      For dates, ensure they follow logical chronology\\n- For names/entities, verify
      exact spelling from the source\\n\\nYour response must be ONLY the extracted
      data in the format of: a JSON object matching the 'CorpusStats' model structure\\n\\nNo
      explanations, no process description, no confidence scores - just the final
      verified JSON.\\n\\nJSON Schema for your response:\\n```json\\n{\\n  \\\"properties\\\":
      {\\n    \\\"document_count\\\": {\\n      \\\"title\\\": \\\"Document Count\\\",\\n
      \     \\\"type\\\": \\\"integer\\\"\\n    },\\n    \\\"total_pages\\\": {\\n
      \     \\\"title\\\": \\\"Total Pages\\\",\\n      \\\"type\\\": \\\"integer\\\"\\n
      \   },\\n    \\\"average_document_length\\\": {\\n      \\\"title\\\": \\\"Average
      Document Length\\\",\\n      \\\"type\\\": \\\"number\\\"\\n    },\\n    \\\"most_common_document_type\\\":
      {\\n      \\\"title\\\": \\\"Most Common Document Type\\\",\\n      \\\"type\\\":
      \\\"string\\\"\\n    }\\n  },\\n  \\\"required\\\": [\\n    \\\"document_count\\\",\\n
      \   \\\"total_pages\\\",\\n    \\\"average_document_length\\\",\\n    \\\"most_common_document_type\\\"\\n
      \ ],\\n  \\\"title\\\": \\\"CorpusStats\\\",\\n  \\\"type\\\": \\\"object\\\"\\n}\\n```\"},{\"role\":\"user\",\"content\":\"Calculate
      statistics for this document collection.\"}],\"model\":\"gpt-4o-mini\",\"stream\":false,\"temperature\":0.7,\"tool_choice\":\"required\",\"tools\":[{\"type\":\"function\",\"function\":{\"name\":\"final_result\",\"description\":\"The
      final response which ends this conversation\",\"parameters\":{\"properties\":{\"document_count\":{\"type\":\"integer\"},\"total_pages\":{\"type\":\"integer\"},\"average_document_length\":{\"type\":\"number\"},\"most_common_document_type\":{\"type\":\"string\"}},\"required\":[\"document_count\",\"total_pages\",\"average_document_length\",\"most_common_document_type\"],\"type\":\"object\"}}}]}"
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '4689'
      content-type:
      - application/json
      cookie:
      - __cf_bm=Hf6wgv84rXjOBoSF0y49n0s2Osk4KqTauf7.8eO3HgE-1751730779-1.0.1.1-7elWekVej0r9oC.8A6xu3R_N5tNGkttvHUY6jYDh4sVDWW7qGCItFjaaO2VGqe4vti4M2X73xBmvgMzdRIAgpQ7n23xXYDmisI2QezsMMbI;
        _cfuvid=32cVjIITQZg_7BX04PlqduLY468ZwsOvr98R9xlRbT4-1751730779674-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - pydantic-ai/0.2.16
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.81.0
      x-stainless-read-timeout:
      - '600'
      x-stainless-retry-count:
      - '1'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.11
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//jFPbTuMwEH3PV1jzTFFvQNs3kFbap0VIFeylyBqcSerFN9kOC1T995Ud
        mgToSpuHKJkzZ+b4zHhXMAayhBUDscUotFOjK/d6+zJbz+8uX2vzZY2XT+d3V9dfyX+7PB/DSWLY
        h98k4oF1Kqx2iqK0poWFJ4yUqk4uziYXs/FiOc6AtiWpRKtdHM3tSEsjR9PxdD4aX4wmizf21kpB
        AVbsV8EYY7v8TjpNSc+wYrlWjmgKAWuCVZfEGHirUgQwBBkimggnPSisiWSSdNMoNQCitYoLVKpv
        3D67wXdvFirFv9sfN7fVn5/b56jXZ+q60o/PN6/CDPq1pV9cFlQ1RnQmDfAuvvrQjDEwqFuuNKi4
        p9Co+IHPGKCvG00mJu2w20BpRf7nwjYmbrJnbAPRRlTcYU2hi+ETeayJdxRFpo7bjJ/mDG1DKqS1
        NX1WOlPK2cAG9vBOz7449n0/8NpT1QRUn4eAxtiIyYs8hfs3ZN8NXNnaefsQPlCTPTJsuScM2cfh
        OIuDkCwBmncbA85b7SKP9pFy08Vy1laFfqt79GzyBrZWdvHlfH5ypB4vKaLMK9VtsUCxpbKn9tuM
        TSntACgGZ/+s5ljt9vzS1P9TvgeEIBep5M5TKcX7E/dpntKl/1da53IWDIH8kxTEoySf5lFShYfV
        hfASImleSVOTd17m+wiV4+dTnM5wMaEKin3xFwAA//8DACIFiNqdBAAA
    headers:
      CF-RAY:
      - 95a80b0eec65464a-DFW
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 05 Jul 2025 15:54:50 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      openai-organization:
      - user-54labie7aicgek5urzpgydpm
      openai-processing-ms:
      - '874'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-envoy-upstream-service-time:
      - '879'
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999007'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 14ms
      x-request-id:
      - req_7dce452604405bd97daac2a3ae4be519
    status:
      code: 200
      message: OK
version: 1
